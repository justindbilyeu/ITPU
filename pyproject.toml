[build-system]
requires = [“setuptools>=61.0”, “wheel”]
build-backend = “setuptools.build_meta”

[project]
name = “itpu”
version = “0.1.0-alpha”
authors = [
{name = “Justin Bilyeu”, email = “justin@yourdomain.com”},
]
description = “Information-Theoretic Processing Unit: Fast entropy, mutual information, and k-NN statistics”
readme = “README.md”
license = {text = “Apache-2.0”}
requires-python = “>=3.8”
classifiers = [
“Development Status :: 3 - Alpha”,
“Intended Audience :: Science/Research”,
“Intended Audience :: Developers”,
“License :: OSI Approved :: Apache Software License”,
“Operating System :: OS Independent”,
“Programming Language :: Python :: 3”,
“Programming Language :: Python :: 3.8”,
“Programming Language :: Python :: 3.9”,
“Programming Language :: Python :: 3.10”,
“Programming Language :: Python :: 3.11”,
“Programming Language :: Python :: 3.12”,
“Topic :: Scientific/Engineering”,
“Topic :: Scientific/Engineering :: Information Analysis”,
“Topic :: Scientific/Engineering :: Medical Science Apps.”,
“Topic :: Software Development :: Libraries :: Python Modules”,
]
keywords = [
“mutual information”,
“entropy”,
“information theory”,
“neuroscience”,
“BCI”,
“medical imaging”,
“signal processing”,
“streaming”,
“real-time”,
“FPGA”,
“hardware acceleration”
]
dependencies = [
“numpy>=1.20.0”,
“scipy>=1.7.0”,
“matplotlib>=3.5.0”,
]

[project.optional-dependencies]
performance = [
“numba>=0.56.0”,
“cupy>=10.0.0”,
]
neuroscience = [
“mne>=1.0.0”,
“nibabel>=3.2.0”,
“scikit-learn>=1.0.0”,
]
medical = [
“nibabel>=3.2.0”,
“pydicom>=2.0.0”,
“opencv-python>=4.5.0”,
]
benchmarks = [
“scikit-learn>=1.0.0”,
“pandas>=1.3.0”,
“seaborn>=0.11.0”,
]
dev = [
“pytest>=6.0.0”,
“pytest-cov>=3.0.0”,
“black>=22.0.0”,
“flake8>=4.0.0”,
“mypy>=0.950”,
“sphinx>=4.0.0”,
“sphinx-rtd-theme>=1.0.0”,
“myst-parser>=0.17.0”,
]
demos = [
“notebook>=6.4.0”,
“ipywidgets>=7.6.0”,
“plotly>=5.0.0”,
“streamlit>=1.0.0”,
]
all = [
“numba>=0.56.0”,
“mne>=1.0.0”,
“nibabel>=3.2.0”,
“scikit-learn>=1.0.0”,
“pandas>=1.3.0”,
“seaborn>=0.11.0”,
“notebook>=6.4.0”,
“ipywidgets>=7.6.0”,
“plotly>=5.0.0”,
]

[project.urls]
Homepage = “https://github.com/justindbilyeu/ITPU”
Documentation = “https://github.com/justindbilyeu/ITPU/docs”
Repository = “https://github.com/justindbilyeu/ITPU”
“Bug Tracker” = “https://github.com/justindbilyeu/ITPU/issues”

[project.scripts]
itpu-benchmark = “itpu.cli:benchmark_cli”
itpu-demo = “itpu.cli:demo_cli”

[tool.setuptools.packages.find]
where = [“src”]

[tool.setuptools.package-data]
itpu = [“py.typed”]

# Black code formatting

[tool.black]
line-length = 88
target-version = [‘py38’, ‘py39’, ‘py310’, ‘py311’]
include = ‘.pyi?$’
extend-exclude = ‘’’
/(

# directories

.eggs
| .git
| .hg
| .mypy_cache
| .tox
| .venv
| build
| dist
| hardware
)/
‘’’

# isort import sorting

[tool.isort]
profile = “black”
multi_line_output = 3
line_length = 88
known_first_party = [“itpu”]
known_third_party = [“numpy”, “scipy”, “matplotlib”, “numba”, “cupy”, “sklearn”, “pandas”]

# flake8 linting (configuration goes in setup.cfg or .flake8)

[tool.flake8]
max-line-length = 88
extend-ignore = [“E203”, “W503”]
exclude = [”.git”, “**pycache**”, “build”, “dist”, “.eggs”, “hardware”]

# mypy type checking

[tool.mypy]
python_version = “3.8”
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, tighten over time
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
“numba.*”,
“cupy.*”,
“sklearn.*”,
“mne.*”,
“nibabel.*”,
“cv2.*”,
“plotly.*”,
]
ignore_missing_imports = true

# pytest configuration

[tool.pytest.ini_options]
minversion = “6.0”
addopts = “-ra -q –strict-markers –strict-config”
testpaths = [“tests”]
python_files = [“test_*.py”, “**test.py”]
python_classes = [“Test*”]
python_functions = [“test**”]
markers = [
“slow: marks tests as slow (deselect with ‘-m "not slow"’)”,
“gpu: marks tests that require GPU (deselect with ‘-m "not gpu"’)”,
“integration: marks tests as integration tests”,
“benchmark: marks tests as benchmarks”,
]
filterwarnings = [
“error”,
“ignore::UserWarning”,
“ignore::DeprecationWarning”,
“ignore::PendingDeprecationWarning”,
]

# coverage.py configuration

[tool.coverage.run]
source = [“src/itpu”]
omit = [
“*/tests/*”,
“*/test_*”,
“setup.py”,
“*/hardware/*”,
]

[tool.coverage.report]
exclude_lines = [
“pragma: no cover”,
“def **repr**”,
“if self.debug:”,
“if settings.DEBUG”,
“raise AssertionError”,
“raise NotImplementedError”,
“if 0:”,
“if **name** == .**main**.:”,
“class .*\bProtocol\):”,
“@(abc\.)?abstractmethod”,
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = “htmlcov”
